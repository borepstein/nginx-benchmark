server {
    listen 80;
    client_max_body_size 1M;
    charset utf-8;
    default_type 'applicaton/json';

    access_log off;

    location /index.html {
      alias /var/www/benchmark.html;
    }

    location /urandom {
      content_by_lua_block {
        local file = io.open("/dev/urandom", "rb")
        local args, err = ngx.req.get_uri_args()
        local size = args["size"]
        if args["size"] == nil then
          size = 2048
        end

        local start_time = os.time()
        io.input(file)
        io.read(tonumber(size))
        local end_time = os.time()
        local time = end_time - start_time

        ngx.print('{')
        ngx.print('"size":', size, ',')
        ngx.print('"time":', time)
        ngx.print('}')
      }
    }

    location /zero {
      content_by_lua_block {
        local file = io.open("/dev/zero", "rb")
        local args, err = ngx.req.get_uri_args()
        local size = args["size"]
        if args["size"] == nil then
          size = 2048
        end

        local start_time = os.time()
        io.input(file)
        io.read(tonumber(size))
        local end_time = os.time()
        local time = end_time - start_time

        ngx.print('{')
        ngx.print('"size":', size, ',')
        ngx.print('"time":', time)
        ngx.print('}')
      }
    }

    location /sleep {
      content_by_lua_block {
        local args, err = ngx.req.get_uri_args()
        local time = args["time"]
        if args["time"] == nil then
          time = 1
        end
        time = tonumber(time)

        ngx.sleep(time)

        ngx.print('{"time":', time, '}')
      }
    }

    location /download {
      default_type 'application/octet-stream';

      content_by_lua_block {
        local file = io.open("/dev/zero", "rb")

        local args, err = ngx.req.get_uri_args()
        local chunk_size = args["chunk_size"]
        if args["chunk_size"] == nil then
          chunk_size = 2048
        end
        chunk_size = tonumber(chunk_size)
        local size = args["size"]
        if args["size"] == nil then
          size = chunk_size * 10
        end
        size = tonumber(size)

        io.input(file)
        local sent = 0
        while (sent < size) do
          content = io.read(chunk_size)
          ngx.print(content)
          sent = sent + chunk_size
        end
      }
    }

    location /upload {
      content_by_lua_block {
        local args, err = ngx.req.get_uri_args()
        local data = args["file"]
        ngx.print(data)
        ngx.print('{"size":', size, '}')
      }
    }
}
